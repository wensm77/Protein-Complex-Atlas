import pandas as pd
import re
import os
import argparse
from typing import Tuple, Optional

def normalize_id(s: str) -> str:
    """
    Normalizes an ID by removing the path, .pdb suffix, and chain suffix (_X),
    and converting it to lowercase.
    Example: /path/to/33jc89_A.pdb -> 33jc89
    
    Args:
        s (str): The input ID string.

    Returns:
        str: The normalized ID string.
    """
    s = os.path.basename(s)
    # This regex removes a .pdb suffix (case-insensitive) and/or a chain suffix like _A at the end.
    s = re.sub(r'(\.pdbi?|_[A-Za-z])$', '', s, flags=re.IGNORECASE)
    return s.lower()

def filter_test_by_cluster_reps(cluster_tsv: str, train_csv: str, test_csv: str, 
                                train_col: str, test_col: str) -> Tuple[pd.DataFrame, Optional[pd.DataFrame]]:
    """
    Filters a test set by cluster representatives to ensure no overlap with a training set.

    Args:
        cluster_tsv (str): Path to the cluster file from Foldseek/MMseqs2 (tab-separated, 2 cols: rep, member).
        train_csv (str): Path to the training set CSV file.
        test_csv (str): Path to the test set CSV file.
        train_col (str): The name of the column in train_csv containing protein/chain IDs.
        test_col (str): The name of the column in test_csv containing protein/chain IDs.

    Returns:
        tuple: A tuple containing (filtered_test_dataframe, overlap_dataframe).
               The second element is None if no overlap is found.
    """
    # --- 1. Build a map from cluster member to its representative ---
    print("Reading cluster file and building member-to-representative map...")
    clu_df = pd.read_csv(cluster_tsv, sep='\t', header=None, names=['rep', 'member'])
    
    member_to_rep_map = pd.Series(
        clu_df['rep'].apply(normalize_id).values,
        index=clu_df['member'].apply(normalize_id)
    ).to_dict()
    print(f"Map constructed with {len(member_to_rep_map)} unique members.")

    # --- 2. Extract the set of all representatives from the training set ---
    print(f"Processing training set to find all representative clusters...")
    train_df = pd.read_csv(train_csv)
    train_ids_norm = train_df[train_col].astype(str).apply(normalize_id)
    
    train_rep_set = set(train_ids_norm.map(member_to_rep_map).dropna())
    
    if not train_rep_set:
        print(f"Warning: Could not find any representative clusters for the training set. Please check if IDs and column names ('{train_col}') are correct.")
        return pd.read_csv(test_csv), None # Cannot filter, return original test set.

    print(f"Found {len(train_rep_set)} representative clusters associated with the training set.")

    # --- 3. Filter the test set ---
    print(f"Processing and filtering the test set...")
    test_df = pd.read_csv(test_csv)
    test_df['norm_id'] = test_df[test_col].astype(str).apply(normalize_id)
    
    test_df['representative'] = test_df['norm_id'].map(member_to_rep_map)
    
    is_overlap = test_df['representative'].isin(train_rep_set)
    
    overlap_df = test_df[is_overlap].copy()
    filtered_df = test_df[~is_overlap].copy()
    
    overlap_df.drop(columns=['norm_id', 'representative'], inplace=True, errors='ignore')
    filtered_df.drop(columns=['norm_id', 'representative'], inplace=True, errors='ignore')
    
    num_overlaps = len(overlap_df)
    if num_overlaps > 0:
        print(f"Filtering complete. Found {num_overlaps} overlapping entries.")
        return filtered_df, overlap_df
    else:
        print("Filtering complete. No cluster-level overlap was detected.")
        return filtered_df, None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Filters a test set based on a training set and a cluster file to remove any members whose cluster representative is present in the training set. This ensures data separation for model evaluation."
    )
    
    parser.add_argument("--cluster_file", required=True, help="Path to the cluster file generated by Foldseek/MMseqs2 (e.g., 'res_cluster.tsv').")
    parser.add_argument("--train_file", required=True, help="Path to the training set CSV file.")
    parser.add_argument("--test_file", required=True, help="Path to the test set CSV file that needs to be filtered.")
    
    parser.add_argument("--train_id_column", default='CHAINID', help="Name of the column containing protein/chain IDs in the training CSV. (Default: 'CHAINID')")
    parser.add_argument("--test_id_column", default='CHAINID', help="Name of the column containing protein/chain IDs in the test CSV. (Default: 'CHAINID')")

    parser.add_argument("--output_filtered_test", default='filtered_test_set.csv', help="File path to save the new, filtered test set. (Default: 'filtered_test_set.csv')")
    parser.add_argument("--output_overlap_report", default='overlap_report.csv', help="File path to save the report of overlapping items that were removed. (Default: 'overlap_report.csv')")

    args = parser.parse_args()

    try:
        original_test_df = pd.read_csv(args.test_file)
        filtered_test_df, overlap_df = filter_test_by_cluster_reps(
            args.cluster_file, 
            args.train_file, 
            args.test_file,
            args.train_id_column,
            args.test_id_column
        )

        print("\n--- Results ---")
        print(f"Original test set size: {len(original_test_df)}")
        if overlap_df is not None:
            print(f"Overlapping items removed: {len(overlap_df)}")
            print(f"Filtered test set size: {len(filtered_test_df)}")
            
            filtered_test_df.to_csv(args.output_filtered_test, index=False)
            print(f"Filtered test set saved to: {args.output_filtered_test}")
            
            overlap_df.to_csv(args.output_overlap_report, index=False)
            print(f"Overlap report saved to: {args.output_overlap_report}")
        else:
            print("No overlap found. The original test set has been saved.")
            original_test_df.to_csv(args.output_filtered_test, index=False)
            
    except FileNotFoundError as e:
        print(f"\nError: Input file not found. Please check your paths. Details: {e}", file=sys.stderr)
    except KeyError as e:
        print(f"\nError: Column not found. Please check your '--train_id_column' or '--test_id_column' arguments. Details: {e}", file=sys.stderr)
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}", file=sys.stderr)